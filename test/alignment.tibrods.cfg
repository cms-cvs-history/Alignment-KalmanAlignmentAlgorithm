process Alignment =
{    
    # initialize  MessageLogger
    service = MessageLogger
    { 

        untracked vstring destinations = { "alignment" }
	untracked vstring statistics = { "alignment"}

	untracked vstring categories = { "Alignment", "AlignmentIORootBase" }
		
	untracked PSet cout =
	{ 
	    untracked string threshold = "DEBUG" 
	    untracked bool noLineBreaks = true 
	}

	untracked PSet alignment =
	{ 
	    untracked string threshold = "INFO" 
	    untracked PSet INFO = { untracked int32 limit = 0 }
	    untracked PSet WARNING = { untracked int32 limit = 0 }
	    untracked PSet ERROR = { untracked int32 limit = 0 }
	    untracked PSet DEBUG = { untracked int32 limit = 0 }
	    untracked PSet Alignment = { untracked int32 limit = -1 }
	    untracked PSet AlignmentIORootBase = { untracked int32 limit = -1 }
	    untracked PSet TrackProducer = { untracked int32 limit = -1 }
	    untracked bool noLineBreaks = true 
	}
    }

    # Alignment producer
    include "Alignment/CommonAlignmentProducer/data/AlignmentProducer.cff"

    replace AlignmentProducer.doMisalignmentScenario = true
    replace AlignmentProducer.MisalignmentScenario = { using TrackerSurveyLASOnlyScenario }

    #
    # Alignment setup
    #
    replace AlignmentProducer.ParameterBuilder =
    {
        PSet Selector =
	{
	    vstring alignParams = { "BarrelRods,100000", "PixelRods,100000" }
	}
    }

    replace AlignmentProducer.ParameterStore.UseExtendedCorrelations = true

    include "Alignment/ReferenceTrajectories/data/TrajectoryFactories.cff"
    include "Alignment/KalmanAlignmentAlgorithm/data/AlignmentUpdators.cff"
    include "Alignment/KalmanAlignmentAlgorithm/data/MetricsUpdators.cff"

    replace AlignmentProducer.algoConfig.TrackRefitter =
    {
	string Fitter = "KFFittingSmoother"   
	string Propagator = "AnalyticalPropagator"
	string TTRHBuilder = "WithoutRefit"
	string src = ""
	untracked bool debug = true

	vstring TrackingSetup = { "TIBTracking" }

	PSet TIBTracking =
	{

	    PSet TrajectoryFactory = { using ReferenceTrajectoryFactory }
	    PSet AlignmentUpdator = { using SingleTrajectoryUpdatorForStrips }
	    PSet MetricsUpdator = { using SimpleMetricsUpdator }

	    vint32 Tracking = { 3 }
	    vint32 External = { 1, 4, 5, 6 }

	    untracked uint32 MinTrackingHits = 3
	    untracked uint32 MinExternalHits = 9

	    untracked string PropagationDirection = "alongMomentum"
	    untracked string ExternalPropagationDirection = "alongMomentum"

	    untracked bool SortInsideOut = true
	    untracked bool SortExternalInsideOut = true
	}
    }

    replace AlignmentProducer.algoConfig.Initialization =
    {
        untracked int32 UpdateGraphs = 100

	untracked bool ApplyRandomStartValues = false

	vstring InitializationSelector = { "PixelRods", "TIBRods", "TOBRods" }

	PSet PixelRods =
	{
 	    vstring AlignableSelection = { "PixelRods" }

 	    untracked double XShiftsStartError = 4e-4
 	    untracked double YShiftsStartError = 4e-4
 	    untracked double ZShiftsStartError = 4e-4

	    untracked bool AddPositionError = true
	}

	PSet TIBRods =
	{
 	    vstring AlignableSelection = { "TIBRods" }

 	    untracked double XShiftsStartError = 4e-4
 	    untracked double YShiftsStartError = 4e-4
 	    untracked double ZShiftsStartError = 4e-4
 	    untracked double XRotationsStartError = 1e-6
 	    untracked double YRotationsStartError = 1e-6
 	    untracked double ZRotationsStartError = 1e-6
	}

	PSet TOBRods =
	{
 	    vstring AlignableSelection = { "TOBRods" }

 	    untracked double XShiftsStartError = 4e-4
 	    untracked double YShiftsStartError = 4e-4
 	    untracked double ZShiftsStartError = 4e-4

	    untracked bool AddPositionError = true
	}
    }

    # track selection for alignment
    module AlignmentTracks = AlignmentTrackSelectorModule
    {
	InputTag src = ALCARECOTkAlZMuMu
	bool filter = false

	bool applyBasicCuts = true
	double ptMin   = 30. 
	double ptMax   = 999.
	double etaMin  = -2.0
	double etaMax  =  2.0
	double phiMin  = -10.0
	double phiMax  =  10.0
	double nHitMin = 10
	double nHitMax = 99
	double chi2nMax= 100.

	bool applyNHighestPt = false
	int32 nHighestPt = 2

	bool applyMultiplicityFilter = false
	int32 minMultiplicity = 1
	int32 maxMultiplicity = 1

	PSet minHitsPerSubDet =
	{
	    int32 inTIB = 0
	    int32 inTOB = 0
	    int32 inTID = 0
	    int32 inTEC = 0
	}
    }

    # initialize magnetic field
    include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"

    # ideal geometry and interface
    include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cfi"
    include "Geometry/TrackerNumberingBuilder/data/trackerNumberingGeometry.cfi"
    include "Geometry/CommonDetUnit/data/bareGlobalTrackingGeometry.cfi"

    # Track refitter (adapted to alignment needs)
    include "RecoTracker/TransientTrackingRecHit/data/TransientTrackingRecHitBuilderWithoutRefit.cfi"
    include "RecoTracker/TrackProducer/data/RefitterWithMaterial.cff"
    replace TrackRefitter.src = "AlignmentTracks"
    replace TrackRefitter.TTRHBuilder = "WithoutRefit"
    replace TrackRefitter.TrajectoryInEvent = true

    include "TrackingTools/GeomPropagators/data/AnalyticalPropagator.cfi"

    # input file
    untracked PSet maxEvents = { untracked int32 input = 100000 }
    source = PoolSource
    { 
        untracked vstring fileNames =
	{
	    "rfio:/castor/cern.ch/cms/store/trkalign/MC/AlCaReco/2007/TkAlZMuMu/DrellYan_mumu_40-CMSSW_1_5_4-RelVal-1186655029-Frontier-CMSSW_1_6_0_pre9/0000.root",
	    "rfio:/castor/cern.ch/cms/store/trkalign/MC/AlCaReco/2007/TkAlZMuMu/DrellYan_mumu_40-CMSSW_1_5_4-RelVal-1186655029-Frontier-CMSSW_1_6_0_pre9/0001.root",
	    "rfio:/castor/cern.ch/cms/store/trkalign/MC/AlCaReco/2007/TkAlZMuMu/DrellYan_mumu_40-CMSSW_1_5_4-RelVal-1186655029-Frontier-CMSSW_1_6_0_pre9/0002.root",
	    "rfio:/castor/cern.ch/cms/store/trkalign/MC/AlCaReco/2007/TkAlZMuMu/DrellYan_mumu_40-CMSSW_1_5_4-RelVal-1186655029-Frontier-CMSSW_1_6_0_pre9/0003.root",
	    "rfio:/castor/cern.ch/cms/store/trkalign/MC/AlCaReco/2007/TkAlZMuMu/DrellYan_mumu_40-CMSSW_1_5_4-RelVal-1186655029-Frontier-CMSSW_1_6_0_pre9/0004.root"
        }

	untracked uint32 skipEvents = 0
    }	

    path p = { AlignmentTracks, TrackRefitter }
}

